@using GameTools.BlazorClient.Middleware
@using GameTools.BlazorClient.Services
@using GameTools.Framework.Contexts
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject HttpContextAccessor HttpCtxAccess
@inject NpcServiceProxy serviceProxy

@if (appStateLoaded)
{
	<CascadingValue Value="this">
		@ChildContent
	</CascadingValue>
}
else
{
	<p>Loading...</p>
}

@code {
	private bool appStateLoaded;
	private const string appContextKey = "appContext";

	public event Func<string, Task>? ContextItemChanged;

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	public ContextContainer AppContext { get; set; }

	public AppStateProvider()
	{
		AppContext = new ContextContainer();
	}

	protected override async Task OnInitializedAsync()
	{
		var browserState = await ProtectedSessionStore.GetAsync<ContextContainer>(appContextKey);
		if(browserState.Success == false || browserState.Value == null)
		{
			// We need to construct and store it.
			AppContext = new ContextContainer();
			var userCtx = HttpCtxAccess?.HttpContext?.GetUserContext();
			if(userCtx != null)
			{
				AppContext.SetUserContext(userCtx);
			}
			await SaveChangesAsync();
		}
		else
		{
			AppContext = browserState.Value;
			var userCtx = AppContext.GetCurrentUser();
			if(userCtx == null)
			{
				userCtx = HttpCtxAccess?.HttpContext?.GetUserContext();
			}
			if(userCtx!=null)
			{
				AppContext.SetUserContext(userCtx);
				await SaveChangesAsync();
			}
		}

		appStateLoaded = true;
	}

	public GameToolsUser? GetCurrentUser(bool loadIfNull = false, bool throwIfNotLoaded = true)
	{
		GameToolsUser? user = AppContext.GetCurrentUser();

		if(user == null && loadIfNull == true)
		{
			user = HttpCtxAccess?.HttpContext?.GetUserContext();
			if(user == null && throwIfNotLoaded == true)
			{
				throw new InvalidOperationException("The user context is required for this operation but cannot be loaded.");
			}

			AppContext.SetUserContext(user!);
			SaveChangesAsync().Wait();
		}

		return user;
	}

	public async Task<UserLimitsModel> GetUserLimits()
	{
		string contextKey = nameof(UserLimitsModel);
		var model = AppContext.RetrieveItem(contextKey) as UserLimitsModel;
		if(model == null)
		{
			string userId = GetCurrentUser(true)!.UserId;
			var proxyResult = await serviceProxy.LoadUserLimits(userId);
			if(proxyResult.WasSuccessful && proxyResult.Payload != null)
			{
				model = proxyResult.Payload;
				await SetUserLimits(model);
			}
			else
			{
				string exMessage = proxyResult.AggregateErrors();
				throw new Exception(exMessage);
			}
		}

		return model;
	}

	public async Task SetUserLimits(UserLimitsModel limits)
	{
		string contextKey = nameof(UserLimitsModel);
		var storedLimits = AppContext.RetrieveItem(contextKey) as UserLimitsModel;

		if(storedLimits == null)
		{
			AppContext.AddItem(contextKey, limits);
		}
		else
		{
			AppContext.UpdateItem(contextKey, limits);
		}
		await SaveChangesAsync();
		await OnContextItemChanged(contextKey);
	}

	public async Task SaveChangesAsync()
	{
		await ProtectedSessionStore.SetAsync(appContextKey, AppContext);
	}

	private async Task OnContextItemChanged(string contextKey)
	{
		if(ContextItemChanged != null)
		{
			await ContextItemChanged.Invoke(contextKey);
		}
	}
}
