@using ThatDeveloperDad.Framework.Converters
<CascadingValue Value="this" Name="LoadingOverlay">
	@if(IsWorking == true)
	{
		<div id="LoadingOverlay">
			<div class="overlay-content">@Caption</div>
			@* @if(IsLongRunning==true)
			{
				
			} *@
		</div>
	}
	@ChildContent
</CascadingValue>

@code {
	public bool IsWorking { get; set; }

	public string Caption { get; set; }

	// private Timer? _waitTimer;
	// public bool IsLongRunning{ get; set; }

	public ContentLoadingComponent()
	{
		Caption = "Working...";
		IsWorking = false;
	}

	protected override Task OnInitializedAsync()
	{
		return base.OnInitializedAsync();
	}

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	public async Task SetLoadingState(bool state, string caption = "Loading...")
	{
		// if(state=true)
		// {
		// 	_waitTimer = new Timer(async () => { IsLongRunning = true; await Task.Delay(1); StateHasChanged(); }
		// 	, null, 0, 2000);
		// }
		IsWorking = state;
		Caption = caption;
		await Task.Delay(1);
		StateHasChanged();
	}
}
